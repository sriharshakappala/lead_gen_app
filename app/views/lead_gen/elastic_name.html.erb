<style>
	.height-fix {
		margin-top: 8px;
	}
</style>

<div class="container-fluid">
	<div class="form-group">		

		<div class="row">
			<div class="col-md-6">
				<label>Check Company Name Availability</label>
				<input class="form-control" type="text" id="company_name"></input>
			</div>
		</div>

		<div id="results_here"></div>
		<br><br>

		<div class="row">
			<div class="col-md-12">
				<div id="the-basics">
				  <input class="typeahead form-control" type="text" placeholder="Enter Company Name">
				</div>
			</div>
		</div>

	</div>
</div>

<!--
Bullshit configuration for enabling CORS in elasticsearch
Add the below stuff in elasticsearch.yml file
*********************************************************
http.cors.allow-origin: "/.*/"
http.cors.enabled: true
discovery.zen.ping.multicast.enabled: false
*********************************************************
-->

<script>

$(document).ready(function() {
	$("#company_name").keyup(function() {
		getSearchResults($('#company_name').val());
	})
});

function getSearchResults(search_query) {
  var data;
  var states = []
  $.ajax({
    type: "GET",
    crossDomain: true,
    url: 'http://localhost:9200/company/external/_search?q=company_name:' + search_query,
    dataType: "JSON",
    success: function(data) {
    	for (i = 0; i < data.hits.hits.length; i++) {
    		states.push(data.hits.hits[i]._source.company_name);
    	}
    	console.log(states);
			data = JSON.stringify(data);
			// document.getElementById('results_here').innerHTML = data;
			// *********** Typeahead Code ***********
			var substringMatcher = function(strs) {
			  return function findMatches(q, cb) {
			    var matches, substrRegex;
			 
			    // an array that will be populated with substring matches
			    matches = [];
			 
			    // regex used to determine if a string contains the substring `q`
			    substrRegex = new RegExp(q, 'i');
			 
			    // iterate through the pool of strings and for any string that
			    // contains the substring `q`, add it to the `matches` array
			    $.each(strs, function(i, str) {
			      if (substrRegex.test(str)) {
			        // the typeahead jQuery plugin expects suggestions to a
			        // JavaScript object, refer to typeahead docs for more info
			        matches.push({ value: str });
			      }
			    });
			 
			    cb(matches);
			  };
			};
			$('#the-basics .typeahead').typeahead({
			  hint: false,
			  highlight: true,
			  minLength: 1
			},
			{
			  name: 'states',
			  displayKey: 'value',
			  source: substringMatcher(states)
			});
			// *********** Typeahead Code ***********
    }
  });
}

var substringMatcher = function(strs) {
  return function findMatches(q, cb) {
    var matches, substrRegex;
 
    // an array that will be populated with substring matches
    matches = [];
 
    // regex used to determine if a string contains the substring `q`
    substrRegex = new RegExp(q, 'i');
 
    // iterate through the pool of strings and for any string that
    // contains the substring `q`, add it to the `matches` array
    $.each(strs, function(i, str) {
      if (substrRegex.test(str)) {
        // the typeahead jQuery plugin expects suggestions to a
        // JavaScript object, refer to typeahead docs for more info
        matches.push({ value: str });
      }
    });
 
    cb(matches);
  };
};
 
var states = ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California',
  'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii',
  'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana',
  'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota',
  'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire',
  'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota',
  'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island',
  'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont',
  'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'
];
 
$('#the-basics .typeahead').typeahead({
  hint: false,
  highlight: true,
  minLength: 1
},
{
  name: 'states',
  displayKey: 'value',
  source: substringMatcher(states)
});

</script>